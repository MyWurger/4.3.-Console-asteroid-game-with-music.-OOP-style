/***************************************************************************
 *      Л А Б О Р А Т О Р Н А Я   Р А Б О Т А   № 2   П О   Т Р П О        *
 *-------------------------------------------------------------------------*
 *                                                                         *
 * Project Name  : Fly_Plate                                               *
 * Project Type  : Win64 Console application                               *
 * File Name     : Secondary_functions.h                                   *
 * Language      : VS2022                         C++                      *
 * Programmers   : Викулов Д. Г.  &&  Куракина А. С  &&  Сашин А. Ю.       *
 * Modified By   :                                                         *
 * Created       : 01 / 11 / 2023                                          *
 * Last Revision : 16 / 11 / 2023                                          *
 * Comment(s)    : Игровое взаимодействие фигур через динамический         *
 *                 полиморфизм. Наследование Матрица переходов.            *
 *                 Абстрактные классы. Интерфейсы.                         *
 **************************************************************************/

#include "Asteroid_co.h"           // подключаем заголовочный файл с классами
#include "Constants.h"             // подключаем файл с объявлением глобальных констант

/*******************************************************************/
/*              П Р О Т О Т И П Ы    Ф У Н К Ц И Й                 */
/*******************************************************************/


// проверка удара пули об летающую тарелку
bool Hit_FlyingPlate_Bullets(Bullet* CurBullet              // указатель базового класса ЛЕТАЮЩИЕ ТАРЕЛКИ
	                       , FlyingPlate* CurPlate);        // указатель базового класса АСТЕРОИДЫ

// проверка удара бомбы об летающую тарелку
bool Hit_FlyingPlate_Bombs(Bomb* CurBomb                    // указатель базового класса ПУЛИ
	                     , FlyingPlate* CurPlate);          // указатель базового класса ЛЕТАЮЩИЕ ТАРЕЛКИ

// проверка удара бомбы об астероид
bool Hit_Asteroids_Bombs(Bomb* CurBomb                      // указатель базового класса ПУЛИ
	                   , Asteroid* CurAsteroid);            // указатель базового класса АСТЕРОИДЫ

// проверка удара корабля об летающую тарелку
bool HitShip_Plate(Ship* CurShip                            // указатель базового класса КОРАБЛИ
	             , FlyingPlate* CurPlate                    // указатель базового класса ЛЕТАЮЩИЕ ТАРЕЛКИ
	             , int& schet);                             // счётчик очков передаётся по ссылке для изменения

// проверка удара пули об астероид
bool HitBullet(Bullet* CurBullet                            // указатель базового класса ПУЛИ
             , Asteroid** CurAsteroid                       // указатель на указатель базового класса АСТЕРОИДЫ, чтобы сразу установить в него астероид, в который произошёл удар пулей
             , Asteroid** Asteroids);                       // массив астероидов для проверки удара с каждым из астероидов

// проверка удара корабля об астероид
bool HitShip(Ship* CurShip                                  // указатель базового класса КОРАБЛИ
           , Asteroid** CurAsteroid                         // указатель на указатель базового класса АСТЕРОИДЫ, чтобы сразу установить в него астероид, который нужно переместить
           , Asteroid** Asteroids);                         // массив астероидов для проверки удара с каждым из астероидов

// смена летающей тарелки
void changeFlyingPlate(FlyingPlate** CurPlate               // указатель на указатель базового класса ЛЕТАЮЩИЕ ТАРЕЛКИ
	                 , FlyingPlate** Plates                 // указатель на первый элемент массива указателей на объекты класса Plates и его наследников
	                 , Bomb* CurBomb                        // указатель базового класса БОМБЫ
	                 , int transition_matr_Flying_Plate[][CountBombs]  // матрица перехода летающих тарелок
	                 , int& schet);                         // счётчик очков передаётся по ссылке для изменения

// смена астероида
void changeAsteroid(Asteroid** CurAsteroid                  // указатель на указатель базового класса АСТЕРОИДЫ
                  , Bullet* CurBullet                       // указатель базового класса ПУЛИ
                  , Asteroid** Asteroids                    // указатель на первый элемент массива указателей на объекты класса Asteroid и его наследников
                  , int transition_matr[][CountBullets]     // матрица перехода астероидов
                  , int dead_matr[][CountBullets]);         // матрица смертей астероидов. Для появления астероида на новом месте после полного цикла переходов

// смена корабля
void changeShip(Ship** CurShip                              // указатель на указатель базового класса КОРАБЛЬ для изменения значения указателя
              , Asteroid* CurAsteroid                       // указатель базового класса АСТЕРОИД
              , Ship** Ships                                // указатель на первый элемент массива указателей на объекты класса Ship и его наследников
              , int ship_matr[][CountMeteor]);              // матрица переходов корабля

// появление астероида на новом месте после того как он достиг конца консоли
void RespavnAsteroid(Asteroid* CurAsteroid);                // указатель базового класса АСТЕРОИДЫ

// вывод счётчика сбитых астероидов на экран
void Count(int schet);                                      // указатель базового класса АСТЕРОИДЫ

//надпись "конец"
void WriteEnd();